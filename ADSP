//Evaluate postfix expression

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

struct stack
{
    int size;
    int top;
    char *arr;
};

void solvingpostfix();
int stackTop(struct stack* sp);

int main()
{
    int choice,ans;
    solvingpostfix();

}
    
int isEmpty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int isFull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void push(struct stack* ptr, char val){
    if(isFull(ptr)){
        printf("Stack Overflowed!");
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}

char pop(struct stack* ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow!\n");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}

void solvingpostfix()
{
    char postfix[100],element;
    int num1,num2,ans;
    printf("\nEnter the Postfix Expression: ");
    scanf("%s",postfix);
    
    struct stack * sp = (struct stack *) malloc(sizeof(struct stack));
    sp->size = 10; 
    sp->top = -1;
    sp->arr = (char *) malloc(sp->size * sizeof(char));
    
    int i=0;
    while(i<=strlen(postfix) - 1)
    {
        element = postfix[i];
        if(isdigit(element))
        {
            push(sp,element - '0');
        }
        else
        {
            num1 = pop(sp);
            num2 = pop(sp);
            switch (element)
            {
            case '^':
                ans = pow(num1 , num2);
                break;

            case '*':
                ans = num1 * num2;
                break;

            case '/':
                ans = num1 / num2;
                break;
            
            case '-':
                ans = num1 - num2;
                break;

            case '+':
                ans = num1 + num2;
                break;
            }
            push(sp,ans);
        }
        i++;
    }
    printf("The Answer is :%d\n", pop(sp));
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Infix To Prefix 

#include<stdio.h>
#include<string.h>
#include<limits.h>
#include<stdlib.h>

#define MAX 100

int top = -1;
char stack[MAX];

int isFull() {
    return top == MAX - 1;
}

int isEmpty() {
    return top == -1;
}

void push(char item) {
    if (isFull()) {
        return;
    }
    top++;
    stack[top] = item;
}

int pop() {
    if (isEmpty()) {
        return INT_MIN;
    }
    return stack[top--];
}

int peek() {
    if (isEmpty()) {
        return INT_MIN;
    }
    return stack[top];
}

int checkIfOperand(char ch) {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}

int precedence(char ch) {
    switch (ch) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
    }
    return -1;
}

int getPostfix(char *expression) {
    int i, j;
    for (i = 0, j = -1; expression[i]; ++i) {
        if (checkIfOperand(expression[i])) {
            expression[++j] = expression[i];
        }
        else if (expression[i] == '(') {
            push(expression[i]);
        }
        else if (expression[i] == ')') {
            while (!isEmpty(stack) && peek(stack) != '(') {
                expression[++j] = pop(stack);
            }
            if (!isEmpty(stack) && peek(stack) != '(') {
                return -1; // invalid expression
            }
            else {
                pop(stack);
            }
        }
        else {
            while (!isEmpty(stack) && precedence(expression[i]) <= precedence(peek(stack))) {
                expression[++j] = pop(stack);
            }
            push(expression[i]);
        }
    }
    while (!isEmpty(stack)) {
        expression[++j] = pop(stack);
    }
    expression[++j] = '\0';
    return 0;
}

void reverse(char *expr) {
    int size = strlen(expr);
    int j = size, i = 0;
    char temp[size];
    temp[j--] = '\0';
    while (expr[i] != '\0') {
        temp[j] = expr[i];
        j--;
        i++;
    }
    strcpy(expr, temp);
}

void brackets(char *expr) {
    int i = 0;
    while (expr[i] != '\0') {
        if (expr[i] == '(') {
            expr[i] = ')';
        }
        else if (expr[i] == ')') {
            expr[i] = '(';
        }
        i++;
    }
}

void InfixtoPrefix(char *expr) {
    reverse(expr);
    brackets(expr);
    getPostfix(expr);
    reverse(expr);
}

int main() {
    char expression[20];
    printf("Enter the infix expression: ");
    scanf("%s", expression);
    printf("The infix expression is: %s\n", expression);
    InfixtoPrefix(expression);
    printf("The prefix expression is: %s\n", expression);
    return 0;
}
/////////////
Infix to Postfix Using Stack

#include<stdio.h>
#include<ctype.h>

char stack[100];
int top = -1;

void push(char x)
{
    stack[++top] = x;
}

char pop()
{
    if(top == -1)
        return -1;
    else
        return stack[top--];
}

int priority(char x)
{
    if(x == '(')
        return 0;
    if(x == '+' || x == '-')
        return 1;
    if(x == '*' || x == '/')
        return 2;
    return 0;
}

int main()
{
    char exp[100];
    char *e, x;
    printf("Enter the expression : ");
    scanf("%s",exp);
    printf("\n");
    e = exp;
    
    while(*e != '\0')
    {
        if(isalnum(*e))
            printf("%c ",*e);
        else if(*e == '(')
            push(*e);
        else if(*e == ')')
        {
            while((x = pop()) != '(')
                printf("%c ", x);
        }
        else
        {
            while(priority(stack[top]) >= priority(*e))
                printf("%c ",pop());
            push(*e);
        }
        e++;
    }
    
    while(top != -1)
    {
        printf("%c ",pop());
    }return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Insertion Sort,Quick Sort,Binary Search 

//Menu driven program for assignment 1
//Insertion sort, Quick sort and Binary search
#include<math.h>
#include<stdio.h>
void insertionSort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
  		while (j >= 0 && arr[j] > key) 
		{
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
    
    
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
    
}

void quicksort(int arr[],int first,int last){
   int i, j, pivot, temp;
   if(first<last){
      pivot=first;
      i=first;
      j=last;
      while(i<j){
         while(arr[i]<=arr[pivot]&&i<last)
         i++;
         while(arr[j]>arr[pivot])
         j--;
         if(i<j){
            temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
         }
      }
      temp=arr[pivot];
      arr[pivot]=arr[j];
      arr[j]=temp;
      quicksort(arr,first,j-1);
      quicksort(arr,j+1,last);
   }
  
}

  
  
  
  
  int binarySearch(int array[], int x, int low, int high) 
  {
  	
  	
  if (high >= low) 
  {
    int mid = low + (high - low) / 2;

    // If found at mid, then return it
    if (array[mid] == x)
      return mid;

    // Search the left half
    if (array[mid] > x)
      return binarySearch(array, x, low, mid - 1);

    // Search the right half
    return binarySearch(array, x, mid + 1, high);
  }

  return -1;
}


  

int main()
{
	start:
	int n, ch;
	printf("\n Enter the number of elements in the array: ");
	scanf("%d", &n);
	int arr[n];
	for (int j =0; j<n; j++)
	{
	printf("\n Enter the element %d of array : ", j+1);
	scanf("%d", &arr[j]);
	}
	
	printf("\n Enter 1 for Insertion Sort, 2 for Quick Sort and 3 for Binary Search - ");
	scanf("%d", &ch);
	if (ch==1)
	{
		insertionSort(arr, n);
	}
	else if(ch==2)
	{
		 quicksort(arr,0,n-1);
		  printf("Order of Sorted elements: ");
         for(int i=0;i<n;i++)
         printf(" %d",arr[i]);
         int choice;
    	printf("\n Enter 1 run program again and 0 to exit - ");
    	scanf("%d", &choice);
    	if (choice==1)
    	goto start;
	}
	else if (ch==3)
	{
		int x;
		printf("\n Enter element to find : ");
  	scanf("%d", &x);
		
		int result = binarySearch(arr, x, 0, n - 1);
  		if (result == -1)
    	printf("Not found");
  		else
    	printf("Element is found at index %d", result);
    	int choice;
    	printf("\n Enter 1 run program again and 0 to exit - ");
    	scanf("%d", &choice);
    	if (choice==1)
    	goto start;
	}
	else
	{
		printf("\n Wrong choice!!");
		goto start;
		
	}     
    
   
  
   
}
////////////////////////////////
//tree inorder preorder ......

// #include <iostream>
#include <stack>
using namespace std;

struct Node
{
    int data;
    Node *left;
    Node *right;
};
Node *newNode(int key)
{
    Node *node = new Node;
    node->data = key;
    node->left = node->right = NULL;
    return node;
}

Node *insert(Node *root, int key)
{
    if (root == NULL)
    {
        return newNode(key);
    }
    if (key < root->data)
    {
        root->left = insert(root->left, key);
    }
    else if (key > root->data)
    {
        root->right = insert(root->right, key);
    }
    return root;
}

void inOrderTraversal(Node *root)
{
    if (root != NULL)
    {
        inOrderTraversal(root->left);
        cout << root->data << " ";
        inOrderTraversal(root->right);
    }
}

void postOrderTraversal(Node *root)
{
    if (root != NULL)
    {
        postOrderTraversal(root->left);
        postOrderTraversal(root->right);
        cout << root->data << " ";
    }
}

void preOrderTraversal(Node *root)
{
    if (root != NULL)
    {
        cout << root->data << " ";
        preOrderTraversal(root->left);
        preOrderTraversal(root->right);
    }
}

void nonRecursiveInOrderTraversal(Node *root)
{
    stack<Node *> s;
    Node *curr = root;
    while (curr != NULL || s.empty() == false)
    {
        while (curr != NULL)
        {
            s.push(curr);
            curr = curr->left;
        }
        curr = s.top();
        s.pop();
        cout << curr->data << " ";
        curr = curr->right;
    }
}

void nonRecursivePreOrderTraversal(Node *root)
{
    if (root == NULL)
    {
        return;
    }
    stack<Node *> s;
    s.push(root);
    while (s.empty() == false)
    {
        Node *curr = s.top();
        cout << curr->data << " ";
        s.pop();
        if (curr->right)
        {
            s.push(curr->right);
        }
        if (curr->left)
        {
            s.push(curr->left);
        }
    }
}

void nonRecursivePostOrderTraversal(Node *root)
{
    if (root == NULL)
    {
        return;
    }
    stack<Node *> s1, s2;
    s1.push(root);
    while (s1.empty() == false)
    {
        Node *curr = s1.top();
        s1.pop();
        s2.push(curr);
        if (curr->left)
        {
            s1.push(curr->left);
        }
        if (curr->right)
        {
            s1.push(curr->right);
        }
    }
    while (s2.empty() == false)
    {
        Node *curr = s2.top();
        cout << curr->data << " ";
        s2.pop();
    }
}

int readChoice()
{
    int choice;
    cout << "\n\nChoose an option";
    cout << "\n\n\t1) Insert a node into the BST\n";
    cout << "\n\tRecursive traversal ";
    cout << "\n\t2) in-order";
    cout << "\n\t3) pre-order";
    cout << "\n\t4) post-order\n";
    cout << "\n\tNon-recursive traversal";
    cout << "\n\t5) in-order";
    cout << "\n\t6) pre-order";
    cout << "\n\t7) post-order\n";
    cout << "\n\t8) Exit";
    cout << "\n\nEnter your choice =  ";
    cin >> choice;
    return choice;
}

int main()
{
    Node *root = NULL;
    int choice, key, elements;
    while (true)
    {
        choice = readChoice();
        switch (choice)
        {
        case 1:
            cout << "\nEnter number of elements to enter = ";
            cin >> elements;
            cout << "\n";
            while (elements != 0)
            {
                cout << "Enter a key to insert = ";
                cin >> key;
                root = insert(root, key);
                elements--;
            }
            break;
        case 2:
            cout << "\nRecursive in-order traversal = ";
            inOrderTraversal(root);
            break;
        case 3:
            cout << "\nRecursive pre-order traversal = ";
            preOrderTraversal(root);
            break;
        case 4:
            cout << "\nRecursive post-order traversal = ";
            postOrderTraversal(root);
            break;
        case 5:
            cout << "\nNon-recursive in-order traversal = ";
            nonRecursiveInOrderTraversal(root);
            break;
        case 6:
            cout << "\nNon-recursive pre-order traversal = ";
            nonRecursivePreOrderTraversal(root);
            break;
        case 7:
            cout << "\nNon-recursive post-order traversal = ";
            nonRecursivePostOrderTraversal(root);
            break;
        case 8:
            cout << "\nExiting program......\n\n\n";
            exit(0);
        default:
            cout << "\nInvalid choice. Please try again.";
        }
    }
    return 0;
}

////////////////////////////////
Tree count height no of nodes and mirror image

#include <stdio.h>
#include <stdlib.h>

typedef struct node  
{  
    int data;  
    struct node *left;  
    struct node *right;  
}node; 

struct node *getNode(int node)  
{  
    struct node *newNode;  
  
    newNode = malloc(sizeof(struct node));  
  
    newNode->data   = node;  
    newNode->left  = NULL;  
    newNode->right = NULL;  
  
    return newNode;  
}  

struct node *insertNode(struct node *root, int node)  
{  
     if(root == NULL)  
         return getNode(node);  
  
     if(root->data < node)  
         root->right = insertNode(root->right,node);  
  
     if(root->data > node)  
         root->left = insertNode(root->left,node);  
  
     return root;  
} 

int Height(struct node* node)
{
    if (node == NULL)
        return 0;
    else {
        
        int lh = Height(node->left);
        int rh = Height(node->right);
  
       
        if (lh > rh)
            return (lh + 1);
        else
            return (rh + 1);
    }
}

int left_height(node* node)
{
    int ht = 0;
    while (node) {
        ht++;
        node = node->left;
    }
    return ht;
}
int right_height(node* node)
{
    int ht = 0;
    while (node) {
        ht++;
        node = node->right;
    }
    return ht;
}
int TotalNodes(node* root)
{
   
    if (root == NULL)
        return 0;
    
    int lh = left_height(root);
    int rh = right_height(root);
    
    if (lh == rh)
        return (1 << lh) - 1;
   
    return 1 + TotalNodes(root->left) + TotalNodes(root->right);
}

void Inorder(struct node* node)
{
    if (node == NULL)
        return;
 
    Inorder(node->left);
    printf("%d ", node->data);
    Inorder(node->right);
}
struct node* MirrorImg(struct node *root){
    if(root == NULL)
        return NULL;
 
    struct node* newNode = getNode(root->data);
 
    newNode->right = MirrorImg(root->left);
    newNode->left = MirrorImg(root->right);
    return newNode;
}

int main()
{
    struct node *root = NULL;
    struct node *mirror;
    printf("Tree Functions!!");
    int ch;
    int node;
    int w = 1;
    while(w==1){
    printf("Enter your choice\n1.Insert node in the tree\n2.Height\n3.No. of nodes\n4.Mirror image\n5.Exit\n");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:
        printf("Insert the node: ");
        scanf("%d",&node);
        root = insertNode(root,node); 
        break;
        
        case 2:
        printf("\nHeight of the tree is: %d \n",Height(root));
        printf("\n");
        break;
        
        case 3:
        printf("\nNumber of nodes is: %d \n",TotalNodes(root));
        printf("\n");
        break;
        
        case 4:
        printf("\nMirror image of the tree is: \n");
        mirror = MirrorImg(root);
        Inorder(mirror);
        printf("\n");
        break;
        
        case 5:
        printf("\nExit!!");
        w = 0;
        break;
        
        default:
        printf("\nInvalid Choice!!");
        break;
        
    }
    }

    return 0;
}
/////////////////////////////////////////////////////////

//singly linked list implementation (all insertion, all deletion function)

//Singly Linked List 

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *head;

void beginsert();
void lastinsert();
void randominsert();
void begin_delete();
void last_delete();
void random_delete();
void display();
void search();
int main()
{
    int choice = 0;
    while (choice != 9)
    {
        printf("\n\n\nChoose one option from the following list ...\n");
        printf("\n1. Insert in begining\n2. Insert at last\n3. Insert at any random location\n4. Delete from Beginning\n5. Delete from last\n6. Delete node after specified location\n7. Search for an element\n8. Show\n9. Exit\n");
        printf("\nEnter your choice - ");
        scanf("\n%d", &choice);
        switch (choice)
        {
        case 1:
            beginsert();
            break;
        case 2:
            lastinsert();
            break;
        case 3:
            randominsert();
            break;
        case 4:
            begin_delete();
            break;
        case 5:
            last_delete();
            break;
        case 6:
            random_delete();
            break;
        case 7:
            search();
            break;
        case 8:
            display();
            break;
        case 9:
            exit(0);
            break;
        default:
            printf("Please enter valid choice..");

            return 0;
        }
    }
}
void beginsert()
{
    struct node *ptr;
    int item;
    ptr = (struct node *)malloc(sizeof(struct node *));
    if (ptr == NULL)
    {
        printf("\nOVERFLOW");
    }
    else
    {
        printf("\nEnter value to insert - ");
        scanf("%d", &item);
        ptr->data = item;
        ptr->next = head;
        head = ptr;
        printf("\nNode inserted!!");
    }
}
void lastinsert()
{
    struct node *ptr, *temp;
    int item;
    ptr = (struct node *)malloc(sizeof(struct node));
    if (ptr == NULL)
    {
        printf("\nOVERFLOW");
    }
    else
    {
        printf("\nEnter value - ");
        scanf("%d", &item);
        ptr->data = item;
        if (head == NULL) // This is to check if the node being inserted is the first node being inserted
        {
            ptr->next = NULL;
            head = ptr;
            printf("\nNode inserted");
        }
        else
        {
            temp = head;
            while (temp->next != NULL)
            {
                temp = temp->next;
            }
            temp->next = ptr;
            ptr->next = NULL;
            printf("\nNode inserted");
        }
    }
}
void randominsert()
{
    int i, loc, item;
    struct node *ptr, *temp;
    ptr = (struct node *)malloc(sizeof(struct node));
    if (ptr == NULL)
    {
        printf("\nOVERFLOW");
    }
    else
    {
        printf("\nEnter element value");
        scanf("%d", &item);
        ptr->data = item;
        printf("\nEnter the location after which you want to insert - ");
        scanf("\n%d", &loc);
        temp = head;
        for (i = 0; i < loc; i++)
        {
            temp = temp->next;
            if (temp == NULL)
            {
                printf("\nCan't insert because reached the end!!\n");
                return;
            }
        }
        ptr->next = temp->next;
        temp->next = ptr;
        printf("\nNode inserted");
    }
}
void begin_delete()
{
    struct node *ptr;
    if (head == NULL)
    {
        printf("\nList is empty\n");
    }
    else
    {
        ptr = head;
        head = ptr->next;
        free(ptr);
        printf("\nNode deleted from the begining ...\n");
    }
}
void last_delete()
{
    struct node *ptr, *ptr1;
    if (head == NULL)
    {
        printf("\nlist is empty");
    }
    else if (head->next == NULL)
    {
        head = NULL;
        free(head);
        printf("\nThe only one node of the list was deleted \n");
    }

    else
    {
        ptr = head;
        while (ptr->next != NULL)
        {
            ptr1 = ptr;
            ptr = ptr->next;
        }
        ptr1->next = NULL;
        free(ptr);
        printf("\nDeleted Node from the last ...\n");
    }
}
void random_delete()
{
    struct node *ptr, *ptr1;
    int loc, i;
    printf("\n Enter the location of the node after which you want to perform deletion \n");
    scanf("%d", &loc);
    ptr = head;
    for (i = 0; i < loc; i++)
    {
        ptr1 = ptr;
        ptr = ptr->next;

        if (ptr == NULL)
        {
            printf("\nCan't delete");
            return;
        }
    }
    ptr1->next = ptr->next;
    free(ptr);
    printf("\nDeleted node %d ", loc + 1);
}
void search()
{
    struct node *ptr;
    int item, i = 0, flag;
    ptr = head;
    if (ptr == NULL)
    {
        printf("\nEmpty List!!\n");
    }
    else
    {
        printf("\nEnter item which you want to search?\n");
        scanf("%d", &item);
        while (ptr != NULL)
        {
            if (ptr->data == item)
            {
                printf("item found at location %d ", i + 1);
                flag = 0;
            }
            else
            {
                flag = 1;
            }
            i++;
            ptr = ptr->next;
        }
        if (flag == 1)
        {
            printf("Item not found\n");
        }
    }
}

void display()
{
    struct node *ptr;
    ptr = head;
    if (ptr == NULL)
    {
        printf("Nothing to print");
    }
    else
    {
        printf("\nprinting values . . . . .\n");
        while (ptr != NULL)
        {
            printf("\n%d", ptr->data);
            ptr = ptr->next;
        }
       
    }
    
}
//////////////////////////////////////////////
//prims kruskal 
Prims:
#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
#define V 5
int minKey(int key[], bool mstSet[])
{
    int min = INT_MAX, min_index;
 
    for (int v = 0; v < V; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v], min_index = v;
 
    return min_index;
}
 
int printMST(int parent[], int graph[V][V])
{
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i,
               graph[i][parent[i]]);
}
void primMST(int graph[V][V])
{
    int parent[V];
    int key[V];

    bool mstSet[V];
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = false;
    key[0] = 0;
    parent[0] = -1; 
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = true;
        for (int v = 0; v < V; v++)
            if (graph[u][v] && mstSet[v] == false
                && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }
    printMST(parent, graph);
}

int main()
{

    int graph[V][V] = { { 0, 2, 0, 6, 0 },
                        { 2, 0, 3, 8, 5 },
                        { 0, 3, 0, 0, 7 },
                        { 6, 8, 0, 0, 9 },
                        { 0, 5, 7, 9, 0 } };

    primMST(graph);
 
    return 0;
}

Kruskal:
#include <stdio.h>

#define MAX 30

typedef struct edge {
  int u, v, w;
} edge;

typedef struct edge_list {
  edge data[MAX];
  int n;
} edge_list;

edge_list elist;

int Graph[MAX][MAX], n;
edge_list spanlist;

void kruskalAlgo();
int find(int belongs[], int vertexno);
void applyUnion(int belongs[], int c1, int c2);
void sort();
void print();

// Applying Krushkal Algo
void kruskalAlgo() {
  int belongs[MAX], i, j, cno1, cno2;
  elist.n = 0;

  for (i = 1; i < n; i++)
    for (j = 0; j < i; j++) {
      if (Graph[i][j] != 0) {
        elist.data[elist.n].u = i;
        elist.data[elist.n].v = j;
        elist.data[elist.n].w = Graph[i][j];
        elist.n++;
      }
    }

  sort();

  for (i = 0; i < n; i++)
    belongs[i] = i;

  spanlist.n = 0;

  for (i = 0; i < elist.n; i++) {
    cno1 = find(belongs, elist.data[i].u);
    cno2 = find(belongs, elist.data[i].v);

    if (cno1 != cno2) {
      spanlist.data[spanlist.n] = elist.data[i];
      spanlist.n = spanlist.n + 1;
      applyUnion(belongs, cno1, cno2);
    }
  }
}

int find(int belongs[], int vertexno) {
  return (belongs[vertexno]);
}

void applyUnion(int belongs[], int c1, int c2) {
  int i;

  for (i = 0; i < n; i++)
    if (belongs[i] == c2)
      belongs[i] = c1;
}

// Sorting algo
void sort() {
  int i, j;
  edge temp;

  for (i = 1; i < elist.n; i++)
    for (j = 0; j < elist.n - 1; j++)
      if (elist.data[j].w > elist.data[j + 1].w) {
        temp = elist.data[j];
        elist.data[j] = elist.data[j + 1];
        elist.data[j + 1] = temp;
      }
}

// Printing the result
void print() {
  int i, cost = 0;

  for (i = 0; i < spanlist.n; i++) {
    printf("\n%d - %d : %d", spanlist.data[i].u, spanlist.data[i].v, spanlist.data[i].w);
    cost = cost + spanlist.data[i].w;
  }

  printf("\nSpanning tree cost: %d", cost);
}

int main() {
  int i, j, total_cost;

  n = 6;

  Graph[0][0] = 0;
  Graph[0][1] = 4;
  Graph[0][2] = 4;
  Graph[0][3] = 0;
  Graph[0][4] = 0;
  Graph[0][5] = 0;
  Graph[0][6] = 0;

  Graph[1][0] = 4;
  Graph[1][1] = 0;
  Graph[1][2] = 2;
  Graph[1][3] = 0;
  Graph[1][4] = 0;
  Graph[1][5] = 0;
  Graph[1][6] = 0;

  Graph[2][0] = 4;
  Graph[2][1] = 2;
  Graph[2][2] = 0;
  Graph[2][3] = 3;
  Graph[2][4] = 4;
  Graph[2][5] = 0;
  Graph[2][6] = 0;

  Graph[3][0] = 0;
  Graph[3][1] = 0;
  Graph[3][2] = 3;
  Graph[3][3] = 0;
  Graph[3][4] = 3;
  Graph[3][5] = 0;
  Graph[3][6] = 0;

  Graph[4][0] = 0;
  Graph[4][1] = 0;
  Graph[4][2] = 4;
  Graph[4][3] = 3;
  Graph[4][4] = 0;
  Graph[4][5] = 0;
  Graph[4][6] = 0;

  Graph[5][0] = 0;
  Graph[5][1] = 0;
  Graph[5][2] = 2;
  Graph[5][3] = 0;
  Graph[5][4] = 3;
  Graph[5][5] = 0;
  Graph[5][6] = 0;

  kruskalAlgo();
  print();
}

/////////////////////////////////////////////////////////////////
//Fibonacci Search 

#include <stdio.h>
int min (int x, int y)
{
 return (x <= y) ? x : y;
}
 
int search (int arr[], int x, int n)
{
 int f2 = 0;
 int f1 = 1;
 int fib = f2 + f1;
 while (fib < n)
   {
     f2 = f1;
     f1 = fib;
     fib = f2 + f1;
   }
 int offset = -1;
  while (fib > 1)
   {
           int i = min (offset + f2, n - 1);
           if (arr[i] < x)
{
  fib = f1;
  f1 = f2;
  f2 = fib - f1;
  offset = i;
}
           else if (arr[i] > x)
{
  fib = f2;
  f1 = f1 - f2;
  f2 = fib - f1;
}
     else
return i;
   }
   if (f1 && arr[offset + 1] == x)
   return offset + 1;
 return -1;
}
int
main ()
{
 int arr[10], n, x;
 printf ("Enter the size of the array: ");
 scanf ("%d", &n);
 printf ("\nEnter the elements in ascending order\n");
 for (int i = 0; i < n; i++)
   {
     scanf ("%d", &arr[i]);
   }
 printf ("\nEnter the element that is to be found: ");
 scanf ("%d", &x);
 int ind = search (arr, x, n);
 if (ind >= 0)
   printf ("Found at index: %d", ind);
 else
   printf ("%d isn't present in the array", x);
 return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   Graph

#include <stdio.h>
#include <stdlib.h>

int node;
int nv, ne;
int i, j, s;
int visited[20];
int a[20][20];
int v1, v2;

// int hash[9][3] = {
//     {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}};

struct queue
{
    int size;
    int f;
    int r;
    int *arr;
};

int isEmpty(struct queue *q)
{
    if (q->r == q->f)
    {
        return 1;
    }
    return 0;
}

int isFull(struct queue *q)
{
    if (q->r == q->size - 1)
    {
        return 1;
    }
    return 0;
}

void enqueue(struct queue *q, int val)
{
    if (isFull(q))
    {
        printf("This Queue is full\n");
    }
    else
    {
        q->r++;
        q->arr[q->r] = val;
    }
}

int dequeue(struct queue *q)
{
    int a = -1;
    if (isEmpty(q))
    {
        printf("This Queue is empty\n");
    }
    else
    {
        q->f++;
        a = q->arr[q->f];
    }
    return a;
}

void DFS(int s)
{
    
    
    printf("%d ", s);
    visited[s] = 1;
    for (int j = 0; j < nv + 1; j++)
    {
        if (a[s][j] == 1 && !visited[j])
        {
            DFS(j);
        }
    }
}


int arr[9][3]={0};
void insert(int ele, int pos){
	int flag=-1;
	for(int i=0;i<3;i++){
		if(arr[pos][i]==0)
		{
		arr[pos][i]=ele;
		break;	
		}
		if(i==2)
		flag=1;
	}
	if(flag==1)
	insert(ele,(pos%9)+1);
}

void display(int arr[9][3]){
	printf("Hash Table = \n");
	for(int i=0;i<9;i++){
		for(int j=0;j<3;j++){
            printf("%d ",arr[i][j]);
			// cout<<arr[i][j]<<" ";
		}
		printf("\n");
	}
}

void hash_fun(){
	int n;
	printf("\nEnter number of elements = ");
	scanf("%d",&n);
	
	printf("\nEnter elements = ");
	for(int j=0;j<n;j++){
		int hash_value=0;
		int val;
		scanf("%d",&val);
		hash_value = val % 9;
		insert(val,hash_value);
	}
	
	display(arr);
	
}





int main()
{

    struct queue q;
    q.size = 400;
    q.f = q.r = 0;
    q.arr = (int *)malloc(q.size * sizeof(int));
    int w1 = 1;
    int w2 = 1;
    int ch1, ch2;
    int no, e, v;

    while (w1 == 1)
    {
        printf("\n\t1) Graph Function\n\t2) Hashing Function\n\t0) Exit\n\nEnter your Choice = ");
        scanf("%d", &ch1);
        switch (ch1)
        {
        case 1:

            printf("\nNumber of Vertices = ");
            scanf("%d", &nv);

            for (int i = 0; i < nv + 1; i++)
            {
                for (int j = 0; j < nv + 1; j++)
                {
                    a[i][j] = 0;
                    a[j][i] = 0;
                }
                visited[i] = 0;
            }

            printf("\nNumber of Edges = ");
            scanf("%d", &ne);
            for (int k = 0; k < ne; k++)
            {
                printf("\nEnter Edges = ", k + 1);
                scanf("%d %d", &v1, &v2);
                a[v1][v2] = 1;
                a[v2][v1] = 1;
            }
            while (w2 == 1)
            {
                printf("\n\n\t1) BFS\n\t2) DFS\n\t0) Main Menu\n\nEnter Choice = ");
                scanf("%d", &ch2);
                switch (ch2)
                {
                case 1:
                    for (int i = 0; i < nv + 1; i++)
                    {
                        visited[i] = 0;
                    }
                    printf("\nBreadh First Search");
                    printf("\nStarting poition = ");
                    scanf("%d", &s);
                    printf("\n");                    
                    printf("BFS = ");
                    printf("%d ", s);
                    visited[s] = 1;
                    enqueue(&q, s);
                    while (!isEmpty(&q))
                    {
                        int node = dequeue(&q);
                        for (int j = 0; j < nv + 1; j++)
                        {
                            if (a[node][j] == 1 && visited[j] == 0)
                            {
                                printf("%d ", j);
                                visited[j] = 1;
                                enqueue(&q, j);
                            }
                        }
                    }
                    break;

                case 2:
                    for (int i = 0; i < nv + 1; i++)
                    {
                        visited[i] = 0;
                    }
                    printf("\nDepth First Search");
                    printf("\nStartarting poition = ");
                    scanf("%d", &s);
                    printf("\n");
                    printf("BFS = ");
                    DFS(s);

                    break;

                case 0:
                    printf("Exiting.....");
                    w2 = 0;
                    break;

                default:
                    printf("Invalid Choice!!");
                    break;
                }
            }
            break;

        case 2:
            hash_fun();
            break;

        case 0:
            printf("Exiting.........");
            w1 = 0;
            break;

        default:
            printf("Invalid Choice!!");
            break;
        }
    }

    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Merge Sort Take Input From The User 

//Merge sort
#include <stdio.h>
 
// function to sort the subsection a[i .. j] of the array a[]
void merge_sort(int i, int j, int a[], int aux[]) {
    if (j <= i) {
        return;     // the subsection is empty or a single element
    }
    int mid = (i + j) / 2;

    // left sub-array is a[i .. mid]
    // right sub-array is a[mid + 1 .. j]
    
    merge_sort(i, mid, a, aux);     // sort the left sub-array recursively
    merge_sort(mid + 1, j, a, aux);     // sort the right sub-array recursively

    int pointer_left = i;       // pointer_left points to the beginning of the left sub-array
    int pointer_right = mid + 1;        // pointer_right points to the beginning of the right sub-array
    int k;      // k is the loop counter

    // we loop from i to j to fill each element of the final merged array
    for (k = i; k <= j; k++) {
        if (pointer_left == mid + 1) {      // left pointer has reached the limit
            aux[k] = a[pointer_right];
            pointer_right++;
        } else if (pointer_right == j + 1) {        // right pointer has reached the limit
            aux[k] = a[pointer_left];
            pointer_left++;
        } else if (a[pointer_left] < a[pointer_right]) {        // pointer left points to smaller element
            aux[k] = a[pointer_left];
            pointer_left++;
        } else {        // pointer right points to smaller element
            aux[k] = a[pointer_right];
            pointer_right++;
        }
    }

    for (k = i; k <= j; k++) {      // copy the elements from aux[] to a[]
        a[k] = aux[k];
    }
}


int main() {
  int a[100], aux[100], n, i, d, swap;
 
  printf("Enter number of elements in the array:\n");
  scanf("%d", &n);
 
  printf("Enter %d integers\n", n);
 
  for (i = 0; i < n; i++)
    scanf("%d", &a[i]);
 
  merge_sort(0, n - 1, a, aux);
 
  printf("Printing the sorted array:\n");
 
  for (i = 0; i < n; i++)
     printf("%d\n", a[i]);
 
  return 0;
}

//////////////////////////////////////////////////////////

// Ternary Search 

#include<iostream>
using namespace std;

int ternarySearch(int array[], int start, int end, int key) {
   if(start <= end) {
      int midFirst = (start + (end - start) /3); //mid of first and second block
      int midSecond = (midFirst + (end - start) /3); //mid of first and second block
      if(array[midFirst] == key)
         return midFirst;
      if(array[midSecond] == key)
         return midSecond;
      if(key < array[midFirst])
         return ternarySearch(array, start, midFirst-1, key);
      if(key > array[midSecond])
         return ternarySearch(array, midSecond+1, end, key);
      return ternarySearch(array, midFirst+1, midSecond-1, key);
   }
   return -1;
}

int main() {
   int n, searchKey, loc;
   cout << "Enter number of items: ";
   cin >> n;
   int arr[n]; //create an array of size n
   cout << "Enter items: " << endl;

   for(int i = 0; i< n; i++) {
      cin >> arr[i];
   }

   cout << "Enter search key to search in the list: ";
   cin >> searchKey;
   if((loc = ternarySearch(arr, 0, n, searchKey)) >= 0)
      cout << "Item found at location: " << loc << endl;
   else
      cout << "Item is not found in the list." << endl;
}
////////////////////////////////////////////////////////////////////////////////

// 
Balanced Parenthesis In C 

#include<stdio.h>  
int main()  
{  
    char expression[50]; // declaration of char type array  
    int x=0, i=0; // declaration of two integer type variables  
    printf("\nEnter an expression");  
    scanf("%s", expression);  
// Scanning the expression until we reach the end of the expression.     
 while(expression[i]!= '\0')  
    {  
    // Condition to check the symbol is '('     
     if(expression[i]=='(')  
        {  
            x++;    // incrementing 'x' variable   
        }  
     // condition to check the symbol is ')'     
     else if(expression[i]==')')  
        {  
            x--;   // decrementing 'x' variable  
            if(x<0)  
            break;  
        }  
    i++;       // incrementing 'i' variable.  
    }  
    // Condition to check whether x is equal to 0 or not.  
    if(x==0)  
    {  
        printf("Expression is balanced");  
    }  
      
    else  
    {  
        printf("Expression is unbalanced");  
    }  
    return 0;  
}  



